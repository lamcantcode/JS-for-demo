function getURLType() {
    var url = window.location;
    var racePattern = /racecard/i;
    var resultPattern = /localresults/i;
    var localPattern = /racing\/information/i;
    var overseaPattern = /\/simulcast/i;

    if (racePattern.test(url)) {
        if (overseaPattern.test(url)) {
            return "SimulcastRaceCard";
        }
        else if (localPattern.test(url)) {
            return "LocalRaceCard";
        }
        return "LocalRaceCard";
    }
    if (resultPattern.test(url)) {
        if (overseaPattern.test(url)) {
            return "SimulcastResult";
        }
        else if (localPattern.test(url)) {
            return "LocalResult";
        }
        return "LocalResult";
    }
    return null;
}


function maxMinDiv(areaname, openTip, closeTip) {
    var curOpenGif = "triopen.gif";
    var curCloseGif = "triclose.gif";
    var curOpenAltEng = "Click to open";
    var curCloseAltEng = "Click to close";
    var curOpenAltChi = "按此開啟";
    var curCloseAltChi = "按此關閉";
    var ControlBody = document.getElementById(areaname + "Body");
    var ControlImage = document.getElementById(areaname + "Img");
    var ControlHyperLink = document.getElementById("hplnk" + areaname);
    if (ControlImage.src.endWith(curCloseGif)) {//Click to open
        ControlBody.style.display = 'block';
        ControlImage.src = ControlImage.src.replace(curCloseGif, curOpenGif);
        ControlImage.alt = curOpenAltEng;
        ControlHyperLink.innerHTML = "<u>" + closeTip + "</u>";
    }
    else {//Click to close
        ControlBody.style.display = 'none';
        ControlImage.src = ControlImage.src.replace(curOpenGif, curCloseGif);
        ControlImage.alt = curOpenAltEng;
        ControlHyperLink.innerHTML = "<u>" + openTip + "</u>";
    }
}
String.prototype.contains = function (it) {
    return this.indexOf(it) != -1;
};
String.prototype.endWith = function (it) {
    return this.indexOf(it) + it.length == this.length;
};


//*****************************************************************************
// hidetable read cookie, default value...
//*****************************************************************************
hidetable = {

    // Detect all hiddenableCtrl tables and attach handlers to their headers.
    init: function () {
        //bind click event
        $("form.hiddenableCtrl a.htSetDefault").click(function () {
            hidetable.setDefault();
            return false;
        });
        $("form.hiddenableCtrl a.htRefreshTable").click(function () {
            hidetable.update();
            return false;
        });

        //remember default setting
        $("form.hiddenableCtrl :checkbox").each(function () {
            hidetable.defaultSetting.push(this.checked ? "1" : "0");
        });

        //load previous setting
        var curCookie = $.cookie(hidetable.cookieName);
        if (curCookie != null) {
            //Update cookie by Adding column Priority
            var arrCookie = curCookie.split("|");
            if (arrCookie.length == 24)
                arrCookie.splice(19, 0, "1");
            hidetable.recover(arrCookie);
        }
        hidetable.update();
        $("table.hiddenable").show();
    },


    cookieName: getURLType() + "Setting",
    cookieOptions: { expires: 365, path: '/' }, //, domain: document.domain.replace(/^www./, '')
    defaultSetting: new Array(),

    setDefault: function () {
        hidetable.recover(hidetable.defaultSetting);
        hidetable.update();
    },

    recover: function (arr) {
        $("form.hiddenableCtrl :checkbox").each(function (index) {
            this.checked = (arr[index] == "0" ? false : true);
        });
    },

    update: function () {
        var cookieValue = new Array();
        $("table.hiddenable").each(function (index, table) {
            $("form.hiddenableCtrl :checkbox").each(function () {
                cookieValue.push(this.checked ? "1" : "0");
                //find the collumn which should be controlled by this form
                var collumnIndex = hidetable.findCollumn(table, $.trim(this.value));
                if (collumnIndex > -1) {
                    hidetable.hideCollumn(table, collumnIndex, this.checked);
                }
                else {
                    alert(this.value);
                }
            });
            hidetable.resize(table);
        });
        if (cookieValue.length > 0)
            $.cookie(hidetable.cookieName, cookieValue.join("|"), hidetable.cookieOptions);
    },

    resize: function (table) {
        var header = table.rows[0].cells;
        var totalWidth = 3;
        for (var i = 0; i < header.length; i++) {
            if ($(header[i]).css('display') != 'none')//$(header[i]).is(':visible')
                totalWidth += hidetable.width(header[i]) + 1;
        }
        if ($(table).parents("table")[0] != undefined) {
            $(table).parents("table")[0].style.width = totalWidth + "px";
        }
        //table.style.width = totalWidth + "px";
    },

    width: function (cell) {
        return parseInt(cell.width.replace('px', ''));
    },

    findCollumn: function (table, collumnText) {
        var header = table.rows[0].cells;
        for (var i = 0; i < header.length; i++) {
            if ($.trim($(header[i]).text()) == collumnText) {
                return i;
            }
        }
        return -1;
    },

    hideCollumn: function (table, idx, display) {
        var cell;
        var i = table.rows.length;
        while (i--) {
            cell = table.rows[i].cells[idx];
            //row.cells[idx].style.display = hide;
            if (display) {
                $(cell).show();
            }
            else {
                $(cell).hide();
            }
        }
    }
}


//*****************************************************************************
// dragtable read session cookie, default value...
//*****************************************************************************
dragtable = {
    // How far should the mouse move before it's considered a drag, not a click?
    dragRadius2: 100,
    setMinDragDistance: function (x) {
        dragtable.dragRadius2 = x * x;
    },

    // Determine browser and version.
    // TODO: eliminate browser sniffing except where it's really necessary.
    Browser: function () {
        var ua, s, i;

        this.isIE = false;
        this.isNS = false;
        this.version = null;
        ua = navigator.userAgent;

        s = "MSIE";
        if ((i = ua.indexOf(s)) >= 0) {
            this.isIE = true;
            this.version = parseFloat(ua.substr(i + s.length));
            return;
        }

        s = "Netscape6/";
        if ((i = ua.indexOf(s)) >= 0) {
            this.isNS = true;
            this.version = parseFloat(ua.substr(i + s.length));
            return;
        }

        // Treat any other "Gecko" browser as NS 6.1.
        s = "Gecko";
        if ((i = ua.indexOf(s)) >= 0) {
            this.isNS = true;
            this.version = 6.1;
            return;
        }
    },
    browser: null,

    // Detect all draggable tables and attach handlers to their headers.
    init: function () {
        dragtable.dragObj.zIndex = 0;
        dragtable.browser = new dragtable.Browser();
        $("table.draggable").each(function () {
            dragtable.makeDraggable(this);
        });
    },

    // The thead business is taken straight from sorttable.
    makeDraggable: function (table) {
        if (table.getElementsByTagName('thead').length == 0) {
            the = document.createElement('thead');
            the.appendChild(table.rows[0]);
            table.insertBefore(the, table.firstChild);
        }

        // Safari doesn't support table.tHead, sigh
        if (table.tHead == null) {
            table.tHead = table.getElementsByTagName('thead')[0];
        }

        var headers = table.tHead.rows[0].cells;
        for (var i = 0; i < headers.length; i++) {
            headers[i].onmousedown = dragtable.dragStart;
        }

        // Replay reorderings from cookies if there are any.
        if (!$(table).hasClass('forget-ordering')) {
            dragtable.replayDrags(table);
        }
    },

    // Global object to hold drag information.
    dragObj: new Object(),

    // Climb up the DOM until there's a tag that matches.
    findUp: function (elt, tag) {
        do {
            if (elt.nodeName && elt.nodeName.search(tag) != -1)
                return elt;
        } while (elt = elt.parentNode);
        return null;
    },

    // clone an element, copying its style and class.
    fullCopy: function (elt, deep) {
        var new_elt = elt.cloneNode(deep);
        new_elt.className = elt.className;
        $.each(elt.style, function (key, value) {
            if (value == null) return;
            if (typeof (value) == "string" && value.length == 0) return;
            //new_elt.style[key] = elt.style[key];
            new_elt.style[key] = value;
        });
        return new_elt;
    },

    eventPosition: function (event) {
        var x, y;
        if (dragtable.browser.isIE) {
            x = window.event.clientX + document.documentElement.scrollLeft
                + document.body.scrollLeft;
            y = window.event.clientY + document.documentElement.scrollTop
                + document.body.scrollTop;
            return { x: x, y: y };
        }
        return { x: event.pageX, y: event.pageY };
    },

    // Determine the position of this element on the page. Many thanks to Magnus
    // Kristiansen for help making this work with "position: fixed" elements.
    absolutePosition: function (elt, stopAtRelative) {
        var ex = 0, ey = 0;
        do {
            var curStyle = dragtable.browser.isIE ? elt.currentStyle
                : window.getComputedStyle(elt, '');
            var supportFixed = !(dragtable.browser.isIE &&
                dragtable.browser.version < 7);
            if (stopAtRelative && curStyle.position == 'relative') {
                break;
            } else if (supportFixed && curStyle.position == 'fixed') {
                // Get the fixed el's offset
                ex += parseInt(curStyle.left, 10);
                ey += parseInt(curStyle.top, 10);
                // Compensate for scrolling
                ex += document.body.scrollLeft;
                ey += document.body.scrollTop;
                // End the loop
                break;
            } else {
                ex += elt.offsetLeft;
                ey += elt.offsetTop;
            }
        } while (elt = elt.offsetParent);
        return { x: ex, y: ey };
    },

    // MouseDown handler -- sets up the appropriate mousemove/mouseup handlers
    // and fills in the global dragtable.dragObj object.
    dragStart: function (event, id) {
        var el;
        var x, y;
        var dragObj = dragtable.dragObj;

        var browser = dragtable.browser;
        if (browser.isIE)
            dragObj.origNode = window.event.srcElement;
        else
            dragObj.origNode = event.target;
        var pos = dragtable.eventPosition(event);

        // Drag the entire table cell, not just the element that was clicked.
        dragObj.origNode = dragtable.findUp(dragObj.origNode, /T[DH]/);

        // Since a column header can't be dragged directly, duplicate its contents
        // in a div and drag that instead.
        // TODO: I can assume a tHead...
        var table = dragtable.findUp(dragObj.origNode, "TABLE");
        dragObj.table = table;
        dragObj.startCol = dragtable.findColumn(table, pos.x);
        if (dragObj.startCol == -1) return;

        var new_elt = dragtable.fullCopy(table, false);
        new_elt.style.margin = '0';

        // Copy the entire column
        var copySectionColumn = function (sec, col) {
            var new_sec = dragtable.fullCopy(sec, false);
            $.each(sec.rows, function () {
                var cell = this.cells[col];
                var new_tr = dragtable.fullCopy(this, false);
                if (this.offsetHeight)
                    new_tr.style.height = this.offsetHeight + "px";
                var new_td = dragtable.fullCopy(cell, true);
                if (cell.offsetWidth)
                    new_td.style.width = cell.offsetWidth + "px";
                new_tr.appendChild(new_td);
                new_sec.appendChild(new_tr);
            });
            return new_sec;
        };

        // First the heading
        if (table.tHead) {
            new_elt.appendChild(copySectionColumn(table.tHead, dragObj.startCol));
        }
        $.each(table.tBodies, function () {
            new_elt.appendChild(copySectionColumn(this, dragObj.startCol));
        });
        if (table.tFoot) {
            new_elt.appendChild(copySectionColumn(table.tFoot, dragObj.startCol));
        }

        var obj_pos = dragtable.absolutePosition(dragObj.origNode, true);
        new_elt.style.position = "absolute";
        new_elt.style.left = obj_pos.x + "px";
        new_elt.style.top = obj_pos.y + "px";
        new_elt.style.width = dragObj.origNode.offsetWidth + "px";
        new_elt.style.height = dragObj.origNode.offsetHeight + "px";
        new_elt.style.opacity = 0.7;

        // Hold off adding the element until this is clearly a drag.
        dragObj.addedNode = false;
        dragObj.tableContainer = dragObj.table.parentNode || document.body;
        dragObj.elNode = new_elt;

        // Save starting positions of cursor and element.
        dragObj.cursorStartX = pos.x;
        dragObj.cursorStartY = pos.y;
        dragObj.elStartLeft = parseInt(dragObj.elNode.style.left, 10);
        dragObj.elStartTop = parseInt(dragObj.elNode.style.top, 10);

        if (isNaN(dragObj.elStartLeft)) dragObj.elStartLeft = 0;
        if (isNaN(dragObj.elStartTop)) dragObj.elStartTop = 0;

        // Update element's z-index.
        dragObj.elNode.style.zIndex = ++dragObj.zIndex;

        // Capture mousemove and mouseup events on the page.
        if (browser.isIE) {
            document.attachEvent("onmousemove", dragtable.dragMove);
            document.attachEvent("onmouseup", dragtable.dragEnd);
            window.event.cancelBubble = true;
            window.event.returnValue = false;
        } else {
            document.addEventListener("mousemove", dragtable.dragMove, true);
            document.addEventListener("mouseup", dragtable.dragEnd, true);
            event.preventDefault();
        }
    },

    // Move the floating column header with the mouse
    // TODO: Reorder columns as the mouse moves for a more interactive feel.
    dragMove: function (event) {
        var x, y;
        var dragObj = dragtable.dragObj;

        // Get cursor position with respect to the page.
        var pos = dragtable.eventPosition(event);

        var dx = dragObj.cursorStartX - pos.x;
        var dy = dragObj.cursorStartY - pos.y;
        if (!dragObj.addedNode && dx * dx + dy * dy > dragtable.dragRadius2) {
            dragObj.tableContainer.insertBefore(dragObj.elNode, dragObj.table);
            dragObj.addedNode = true;
        }

        // Move drag element by the same amount the cursor has moved.
        var style = dragObj.elNode.style;
        style.left = (dragObj.elStartLeft + pos.x - dragObj.cursorStartX) + "px";
        style.top = (dragObj.elStartTop + pos.y - dragObj.cursorStartY) + "px";

        if (dragtable.browser.isIE) {
            window.event.cancelBubble = true;
            window.event.returnValue = false;
        } else {
            event.preventDefault();
        }
    },

    // Stop capturing mousemove and mouseup events.
    // Determine which (if any) column we're over and shuffle the table.
    dragEnd: function (event) {
        if (dragtable.browser.isIE) {
            document.detachEvent("onmousemove", dragtable.dragMove);
            document.detachEvent("onmouseup", dragtable.dragEnd);
        } else {
            document.removeEventListener("mousemove", dragtable.dragMove, true);
            document.removeEventListener("mouseup", dragtable.dragEnd, true);
        }

        // If the floating header wasn't added, the mouse didn't move far enough.
        var dragObj = dragtable.dragObj;
        if (!dragObj.addedNode) {
            return;
        }
        dragObj.tableContainer.removeChild(dragObj.elNode);

        // Determine whether the drag ended over the table, and over which column.
        var pos = dragtable.eventPosition(event);
        var table_pos = dragtable.absolutePosition(dragObj.table);
        if (pos.y < table_pos.y || pos.y > table_pos.y + dragObj.table.offsetHeight) {
            return;
        }
        var targetCol = dragtable.findColumn(dragObj.table, pos.x);
        if (targetCol != -1 && targetCol != dragObj.startCol) {
            dragtable.moveColumn(dragObj.table, dragObj.startCol, targetCol);
            if (!$(dragObj.table).hasClass('forget-ordering')) {
                dragtable.rememberDrag(dragObj.table.id, dragObj.startCol, targetCol);
            }
        }
    },

    // Which column does the x value fall inside of? x should include scrollLeft.
    findColumn: function (table, x) {
        var header = table.tHead.rows[0].cells;
        for (var i = 0; i < header.length; i++) {
            //var left = header[i].offsetLeft;
            //if display=="none" then continue
            if ($(header[i]).css('display') != 'none') {
                var pos = dragtable.absolutePosition(header[i]);
                //if (left <= x && x <= left + header[i].offsetWidth) {
                if (pos.x <= x && x <= pos.x + header[i].offsetWidth) {
                    return i;
                }
            }
        }
        return -1;
    },

    // Move a column of table from start index to finish index.
    // Based on the "Swapping table columns" discussion on comp.lang.javascript.
    // Assumes there are columns at sIdx and fIdx
    moveColumn: function (table, sIdx, fIdx) {
        var row, cA;
        var i = table.rows.length;
        while (i--) {
            row = table.rows[i]
            var x = row.removeChild(row.cells[sIdx]);
            if (fIdx < row.cells.length) {
                row.insertBefore(x, row.cells[fIdx]);
            } else {
                row.appendChild(x);
            }
        }

        // For whatever reason, sorttable tracks column indices this way.
        // Without a manual update, clicking one column will sort on another.
        var headrow = table.tHead.rows[0].cells;
        for (var i = 0; i < headrow.length; i++) {
            headrow[i].sorttable_columnindex = i;
        }
    },

    // Store a column swap in a cookie for posterity.
    rememberDrag: function (id, a, b) {
        var prev = $.cookie(dragtable.cookiesName(id));
        var new_val = "";
        if (prev) new_val = prev + ",";
        new_val += a + "/" + b;
        $.cookie(dragtable.cookiesName(id), new_val, { expires: 365, path: '/' }); //write session cookie
    },

    // Replay all column swaps for a table.
    replayDrags: function (table) {
        var dragstr = $.cookie(dragtable.cookiesName(table.id));
        if (!dragstr) return;
        var drags = dragstr.split(',');
        for (var i = 0; i < drags.length; i++) {
            var pair = drags[i].split("/");
            if (pair.length != 2) continue;
            var a = parseInt(pair[0]);
            var b = parseInt(pair[1]);
            if (isNaN(a) || isNaN(b)) continue;
            dragtable.moveColumn(table, a, b);
        }
    },

    cookiesName: function (id) {
        var name = getURLType() + 'DragTable';
        if (!(id == null || id == undefined)) {
            name += id;
        }
        return name;
    }
}

/* ******************************************************************
Supporting functions: bundled here to avoid depending on a library
****************************************************************** */
$(document).ready(function () {
    ScratchHorseRow();
    dragtable.init();
    hidetable.init();
});

function ScratchHorseRow() {
    $("tr.TrScratch td:not(.TdScratch)").html('--');
};